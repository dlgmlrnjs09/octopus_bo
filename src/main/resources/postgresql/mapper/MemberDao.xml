<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.weaverloft.octopus.basic.member.dao.MemberDao">

    <!-- 기본 where절 -->
    <sql id="defaultWhere">
        <choose>
            <when test="!@org.springframework.util.CollectionUtils@isEmpty(memberSeqList)">
                AND member_seq IN
                <foreach collection="memberSeqList" item="arr" open="(" close=")" separator=",">
                    #{arr}
                </foreach>
            </when>
            <when test="!@org.springframework.util.CollectionUtils@isEmpty(membershipSeqList)">
                AND membership_seq IN
                <foreach collection="membershipSeqList" item="arr" open="(" close=")" separator=",">
                    #{arr}::int4
                </foreach>
            </when>
            <otherwise>
                <if test="searchKeyword != null and searchKeyword !=''">
                    <if test="searchType == 'memberId' ">
                        AND UPPER(member_id) LIKE '%'||UPPER(#{searchKeyword})||'%'
                    </if>
                    <if test="searchType == 'memberNm' ">
                        AND UPPER(member_nm) LIKE '%'||UPPER(#{searchKeyword})||'%'
                    </if>
                    <if test="searchType == 'memberEmail' ">
                        AND UPPER(member_email_full) LIKE '%'||UPPER(#{searchKeyword})||'%'
                    </if>
                </if>

                <if test="startDate !=null and startDate !='' and (endDate ==null or endDate =='')">
                    AND reg_dt <![CDATA[>=]]> #{startDate}::timestamp
                </if>

                <if test="endDate !=null and endDate !='' and (startDate ==null or startDate =='')">
                    AND reg_dt <![CDATA[<=]]> #{endDate}::timestamp + interval '1 day'
                </if>

                <if test="endDate !=null and endDate !='' and startDate !=null and startDate !='' ">
                    AND reg_dt <![CDATA[>=]]> #{startDate}::timestamp AND reg_dt <![CDATA[<]]> #{endDate}::timestamp + interval '1 day'
                </if>
            </otherwise>
        </choose>
    </sql>

    <select id="selectMemberCount" parameterType="com.weaverloft.octopus.basic.member.vo.MemberVo" resultType="int">
        SELECT
            count(*)
        FROM
            octopus.member_info
        WHERE
            1=1
        <include refid="defaultWhere"/>
    </select>

    <select id="selectMemberList" parameterType="com.weaverloft.octopus.basic.member.vo.MemberVo" resultType="com.weaverloft.octopus.basic.member.vo.MemberVo">
        SELECT
            A.*
        FROM
            (SELECT
                member_seq AS memberSeq,
                member_id AS memberId,
                member_nm AS memberNm,
                member_phone1 || '-' || member_phone2 || '-' || member_phone3 AS memberPhoneFull,
                member_birth AS memberBirth,
                member_addr1 AS memberAddr1,
                member_addr2 AS memberAddr2,
                member_addr_detail AS memberAddrDetail,
                member_zip_code AS memberZipCode,
                member_email_id AS memberEmailId,
                member_email_domain AS memberEmailDomain,
                member_email_full AS memberEmailFull,
                (SELECT membership_name FROM octopus.membership_info ms WHERE ms.membership_seq = mi.membership_seq::int4) AS membershipName,
                is_membership_fixed AS isMembershipFixed,
                TO_CHAR(reg_dt, 'yyyy-mm-dd hh24:mi:ss') AS regDt
            FROM
                octopus.member_info mi
            WHERE
                1=1
            <include refid="defaultWhere"/>
            ORDER BY
                reg_dt DESC) A
        LIMIT
            #{pagingModel.pageSize}
        OFFSET
            (#{pagingModel.curPage} - 1) * #{pagingModel.pageSize}
    </select>

    <select id="selectExcelMemberList" parameterType="com.weaverloft.octopus.basic.member.vo.MemberVo" resultType="com.weaverloft.octopus.basic.member.vo.MemberVo">
        SELECT
            mi.member_seq AS memberSeq,
            mi.member_id AS memberId,
            mi.member_nm AS memberNm,
            (SELECT membership_name FROM octopus.membership_info ms WHERE ms.membership_seq = mi.membership_seq::int4) AS membershipName,
            mi.member_phone1 || '-' || mi.member_phone2 || '-' || mi.member_phone3 AS memberPhoneFull,
            mi.member_birth AS memberBirth,
            mi.member_zip_code AS memberZipCode,
            mi.member_addr1 || ' ' || mi.member_addr2 || ' ' || mi.member_addr_detail AS memberAddrFull,
            mi.member_email_full AS memberEmailFull,
            TO_CHAR(mi.reg_dt, 'yyyy-mm-dd hh24:mi:ss') AS regDt
        FROM
            octopus.member_info mi
        WHERE
            1=1
        <include refid="defaultWhere"/>
        ORDER BY
            mi.reg_dt DESC
    </select>

    <select id="getMemberDetail" parameterType="com.weaverloft.octopus.basic.member.vo.MemberVo" resultType="com.weaverloft.octopus.basic.member.vo.MemberVo">
        SELECT
                m.member_seq AS memberSeq,
                m.member_id AS memberId,
                m.member_nm AS memberNm,
                m.member_phone1 AS memberPhone1,
                m.member_phone2 AS memberPhone2,
                m.member_phone3 AS memberPhone3,
                TO_CHAR(TO_DATE(m.member_birth, 'YYYYMMDD'), 'YYYY/MM/DD') AS memberBirth,
                m.member_addr1 AS memberAddr1,
                m.member_addr2 AS memberAddr2,
                m.member_addr_detail AS memberAddrDetail,
                m.member_addr1 || ' ' || member_addr2 || ' ' || member_addr_detail AS memberAddrFull,
                m.member_zip_code AS memberZipCode,
                m.member_email_id AS memberEmailId,
                m.member_email_domain AS memberEmailDomain,
                m.member_email_full AS memberEmailFull,
                m.membership_seq as membershipSeq,
                s.membership_name as membershipName,
                m.is_membership_fixed as isMembershipFixed,
                m.is_use AS isUse,
                TO_CHAR(m.reg_dt, 'yyyy-mm-dd hh24:mi:ss') AS regDt
        FROM
            octopus.member_info m
            INNER JOIN octopus.membership_info s ON m.membership_seq = s.membership_seq
        WHERE
            member_seq = #{memberSeq}
    </select>

    <update id="updateMembership" parameterType="com.weaverloft.octopus.basic.member.vo.MemberVo">
        UPDATE
        octopus.member_info
        SET
        <if test="'seq'.equals(flag)">
            membership_seq = #{membershipSeq},
        </if>
        <if test="'fix'.equals(flag)">
            is_membership_fixed = #{isMembershipFixed}::bool,
        </if>
        udt_dt = now()
        WHERE
            member_seq IN
            <foreach collection="memberSeqList" item="arr" open="(" close=")" separator=",">
                #{arr}
            </foreach>
    </update>

    <update id="updateMember" parameterType="com.weaverloft.octopus.basic.member.vo.MemberVo">
        UPDATE
            octopus.member_info
        SET
            member_nm = #{memberNm},
            member_phone1 = #{memberPhone1},
            member_phone2 = #{memberPhone2},
            member_phone3 = #{memberPhone3},
            <if test="memberZipCode != null and memberZipCode != '' and memberAddr1 != null and memberAddr1 != ''">
                member_zip_code = #{memberZipCode},
                member_addr1 = #{memberAddr1},
                member_addr2 = #{memberAddr2},
                member_addr_detail = #{memberAddrDetail},
            </if>
            <if test="membershipSeq != null and membershipSeq > 0">
                membership_seq = #{membershipSeq},
            </if>
            is_membership_fixed = #{isMembershipFixed}::bool,
            member_email_id = #{memberEmailId},
            member_email_domain = #{memberEmailDomain},
            member_email_full = #{memberEmailFull},
            udt_dt = now()
        WHERE
            member_seq = #{memberSeq}
    </update>

    <insert id="insertMember" parameterType="com.weaverloft.octopus.basic.member.vo.MemberVo">
        INSERT INTO octopus.member_info (
            member_seq,
            member_id,
            member_pw,
            member_phone1,
            member_phone2,
            member_phone3,
            member_email_id,
            member_email_domain,
            member_email_full
        ) VALUES (
            nextval('octopus.member_info_member_seq_seq'),
            #{memberId},
            #{memberPw},
            #{memberPhone1},
            #{memberPhone2},
            #{memberPhone3},
            #{memberEmailId},
            #{memberEmailDomain},
            #{memberEmailFull}
        )
    </insert>

    <select id="selectMemberIdList" resultType="String">
        SELECT
            DISTINCT member_id
        FROM
            octopus.member_info
    </select>

    <select id="selectMemberAgeList" resultType="map">
        <![CDATA[
        WITH age_table (age) AS (
            SELECT
                EXTRACT( year FROM age(CURRENT_DATE, to_date(member_birth, 'YYYYMMDD'))) AS age
            FROM
                octopus.member_info
        )
        SELECT
            COUNT(CASE WHEN age >= 10 AND age < 20 THEN 1 END) AS age10,
            COUNT(CASE WHEN age >= 20 AND age < 30 THEN 1 END) AS age20,
            COUNT(CASE WHEN age >= 30 AND age < 40 THEN 1 END) AS age30,
            COUNT(CASE WHEN age >= 40 AND age < 50 THEN 1 END) AS age40,
            COUNT(CASE WHEN age >= 50 AND age < 60 THEN 1 END) AS age50,
            COUNT(CASE WHEN age >= 60 AND age < 70 THEN 1 END) AS age60,
            COUNT(CASE WHEN age >= 70 AND age < 80 THEN 1 END) AS age70
--             COUNT(CASE WHEN age >= 80 AND age < 90 THEN 1 END) AS age80,
--             COUNT(CASE WHEN age >= 90 AND age < 100 THEN 1 END) AS age90
        FROM
            age_table
        ]]>
    </select>

</mapper>
